// MCP Server –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç X
const { MCPServer } = require('@mcpjs/server');
const { Anthropic } = require('@anthropic-ai/sdk');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
function countCharacters(text) {
  return text.length;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function processRequest(input) {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { text } = input;
    
    if (!text) {
      return { error: '–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' };
    }
    
    // –ó–∞–ø—Ä–æ—Å –∫ Anthropic Claude
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 1000,
      system: `You are an expert X (Twitter) post formatter specializing in character-limited adaptations.

SYSTEM INSTRUCTION:
Convert Telegram channel posts to X format with EXACTLY these specifications:
1. CRITICAL: Maximum 220 characters - NO EXCEPTIONS
2. If output exceeds 220 chars, you MUST trim until under limit
3. Add line breaks for readability
4. Maintain key information: names, ranks, achievements, numbers
5. Use emojis to enhance emotion (üî•üëÄüèÜ)
6. Create excitement with dynamic, short sentences
7. Always end with brief call-to-action
8. Before submitting, count characters and confirm under 220

FORMAT:
- First line: Display character count: "[X chars]"
- Then display formatted post
- If over 220 chars, rewrite and show updated count`,
      messages: [
        {
          role: 'user',
          content: `Convert this Telegram post to X format following all system instructions: "${text}"`,
        },
      ],
    });
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const formattedText = response.content[0].text;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
    const match = formattedText.match(/\[(\d+) chars\]/i);
    let charCount = match ? parseInt(match[1]) : countCharacters(formattedText);
    let cleanText = formattedText.replace(/\[\d+ chars\]/i, '').trim();
    
    if (charCount > 220) {
      return {
        warning: 'AI –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π 220 —Å–∏–º–≤–æ–ª–æ–≤!',
        formatted_text: cleanText,
        character_count: charCount
      };
    }
    
    return {
      formatted_text: cleanText,
      character_count: charCount
    };
    
  } catch (error) {
    console.error('Error:', error);
    return { error: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}` };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞
const server = new MCPServer({
  processRequest,
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen();
console.log('MCP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', process.env.PORT || 3000);